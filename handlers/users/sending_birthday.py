import asyncio
import sqlite3
import datetime

from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message

from data.config import load_config
from filters import PrivateChatFilter

config = load_config('.env')  # Load the configuration from .env file

router = Router(name='sending_birthday')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
async def check_upcoming_birthdays(bot: Bot):
    try:
        conn = sqlite3.connect(config.tg_bot.DB_FILE)
        cursor = conn.cursor()

        today = datetime.date.today()
        upcoming_birthdays_found = False

        cursor.execute(
            "SELECT birthday, edit_firstname, edit_lastname FROM birthdays WHERE strftime('%m-%d', birthday) BETWEEN strftime('%m-%d', date('now')) AND strftime('%m-%d', date('now', '+7 day'))",
        )
        upcoming_birthdays = cursor.fetchall()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
        for row in upcoming_birthdays:
            date_str = row[0]
            familiya = row[1]
            name = row[2]

            date_birthday = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
            current_date = datetime.datetime.now().date()
            days_left = (date_birthday.replace(
                year=current_date.year) - current_date).days  # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö

            upcoming_date = today + datetime.timedelta(days=days_left)

            if len(upcoming_birthdays) > 0:
                tomorrow = today + datetime.timedelta(days=1)  # Get tomorrow's date
                upcoming_birthdays_found = True
                if upcoming_date == datetime.date.today():  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å - –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
                    await bot.send_message(config.tg_bot.chat,
                                           f"üéâ –° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è, <b>{familiya}</b> <b>{name}</b>! ü•≥üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ç–µ–±—è —Å —ç—Ç–∏–º –æ—Å–æ–±–µ–Ω–Ω—ã–º –¥–Ω–µ–º!")
                    await asyncio.sleep(10)
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ—Ç—Å—á–µ—Ç–æ–º –¥–Ω–µ–π
                    if days_left > 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ 0 –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
                        if days_left == 1:
                            declension_days = "–¥–µ–Ω—å"
                        elif 2 <= days_left % 10 <= 4:
                            declension_days = "–¥–Ω—è"
                        else:
                            declension_days = "–¥–Ω–µ–π"
                        await bot.send_message(config.tg_bot.chat,
                                               f"üéÅ –ß–µ—Ä–µ–∑ {days_left} {declension_days} —É <b>{familiya}</b> <b>{name}</b> –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!")
                    await asyncio.sleep(3)
                elif upcoming_date == tomorrow:  # If it's tomorrow's birthday
                    # Send the birthday message for tomorrow
                    await bot.send_message(config.tg_bot.chat,
                                           f"üéâ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É <b>{familiya}</b> <b>{name}</b>! ü•≥üéä ")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
                    if days_left == 1:
                        declension_days = "–¥–µ–Ω—å"
                    elif 2 <= days_left % 10 <= 4:
                        declension_days = "–¥–Ω—è"
                    else:
                        declension_days = "–¥–Ω–µ–π"
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ—Ç—Å—á–µ—Ç–æ–º –¥–Ω–µ–π
                    await bot.send_message(config.tg_bot.chat,
                                           f"üéÅ –ß–µ—Ä–µ–∑ {days_left} {declension_days} —É <b>{familiya}</b> <b>{name}</b> –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!")
                    if upcoming_date == tomorrow:  # If it's tomorrow's birthday
                        await bot.send_message(config.tg_bot.chat,
                                               f"üéâ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É <b>{familiya}</b> <b>{name}</b>! ü•≥üéä ")
        if not upcoming_birthdays_found:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
            await bot.send_message(config.tg_bot.chat, "‚òπÔ∏è –í –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.")
        conn.close()
    except Exception as e:
        print(e)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /bd_check
@router.message(F.text == "üéÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è")
@router.message(Command('bd_check'), PrivateChatFilter())
async def check_today_birthdays(message: Message):
    try:
        conn = sqlite3.connect(config.tg_bot.DB_FILE)
        cursor = conn.cursor()

        today = datetime.date.today()
        upcoming_birthdays_found = False

        cursor.execute(
            "SELECT birthday, edit_firstname, edit_lastname FROM birthdays WHERE strftime('%m-%d', birthday) BETWEEN strftime('%m-%d', date('now')) AND strftime('%m-%d', date('now', '+7 day'))",
        )
        upcoming_birthdays = cursor.fetchall()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
        for row in upcoming_birthdays:
            date_str = row[0]
            familiya = row[1]
            name = row[2]

            date_birthday = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
            current_date = datetime.datetime.now().date()
            days_left = (date_birthday.replace(
                year=current_date.year) - current_date).days  # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö

            upcoming_date = today + datetime.timedelta(days=days_left)

            if len(upcoming_birthdays) > 0:
                tomorrow = today + datetime.timedelta(days=1)  # Get tomorrow's date
                upcoming_birthdays_found = True
                if upcoming_date == datetime.date.today():  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å - –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
                    await message.answer(
                        f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É <b>{familiya}</b> <b>{name}</b>! ü•≥üéä ")
                    await asyncio.sleep(10)
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ—Ç—Å—á–µ—Ç–æ–º –¥–Ω–µ–π
                    if days_left > 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ 0 –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
                        if days_left == 1:
                            declension_days = "–¥–µ–Ω—å"
                        elif 2 <= days_left % 10 <= 4:
                            declension_days = "–¥–Ω—è"
                        else:
                            declension_days = "–¥–Ω–µ–π"
                        await message.answer(f"üéÅ –ß–µ—Ä–µ–∑ {days_left} {declension_days} —É <b>{familiya}</b> <b>{name}</b> –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!")
                    await asyncio.sleep(3)
                elif upcoming_date == tomorrow:  # If it's tomorrow's birthday
                    # Send the birthday message for tomorrow
                    await message.answer(f"üéâ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É <b>{familiya}</b> <b>{name}</b>! ü•≥üéä ")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
                    if days_left == 1:
                        declension_days = "–¥–µ–Ω—å"
                    elif 2 <= days_left % 10 <= 4:
                        declension_days = "–¥–Ω—è"
                    else:
                        declension_days = "–¥–Ω–µ–π"
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ—Ç—Å—á–µ—Ç–æ–º –¥–Ω–µ–π
                    await message.answer(f"üéÅ –ß–µ—Ä–µ–∑ {days_left} {declension_days} —É <b>{familiya}</b> <b>{name}</b> –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!")
                    if upcoming_date == tomorrow:  # If it's tomorrow's birthday
                        await message.answer(f"üéâ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É <b>{familiya}</b> <b>{name}</b>! ü•≥üéä ")
        if not upcoming_birthdays_found:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
            await message.answer("‚òπÔ∏è –í –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.")
        conn.close()
    except Exception as e:
        print(e)
